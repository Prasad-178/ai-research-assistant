name: AWS CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"
          
          ECR_PUBLIC_ALIAS=${{ secrets.ECR_PUBLIC_REGISTRY_ALIAS }}
          FULL_ECR_IMAGE_URI="${ECR_PUBLIC_ALIAS}/${ECR_REPOSITORY}"

          echo "Building image: $FULL_ECR_IMAGE_URI:$IMAGE_TAG"
          docker build -t $FULL_ECR_IMAGE_URI:$IMAGE_TAG .
          
          echo "Pushing image to $FULL_ECR_IMAGE_URI:$IMAGE_TAG"
          docker push $FULL_ECR_IMAGE_URI:$IMAGE_TAG

  # --- Optional: CI Steps (Linters/Tests) ---
  # lint-and-test:
  #   name: Lint and Test
  #   runs-on: ubuntu-latest
  #   # Run on PRs to main AND pushes to main
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10' # Match your project's Python version
  #
  #     - name: Install PDM
  #       run: pip install pdm
  #
  #     - name: Install dependencies (including dev)
  #       run: pdm install -d 
  #
  #     - name: Run linters (e.g., Ruff or Flake8 + Black)
  #       run: |
  #         pdm run ruff check .  # If using Ruff
  #         # pdm run flake8 .
  #         # pdm run black --check .
  #
  #     - name: Run tests (if you have them, e.g., with pytest)
  #       run: |
  #         # pdm run pytest

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push-ecr
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
   
      - name: Send command to EC2 to update Docker container
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Converge state and restart Docker container from GitHub Actions" \
            --parameters '{"commands": [
              "echo \"--- [Step 1/5] Checking and Installing Docker ---\"",
              "if ! command -v docker &> /dev/null; then",
              "  echo \"Docker not found. Installing Docker...\"",
              "  if grep -q 'VERSION_ID=\"2\"' /etc/os-release; then",
              "    echo \"Detected Amazon Linux 2. Installing with amazon-linux-extras.\"",
              "    yum update -y",
              "    amazon-linux-extras install docker -y",
              "  elif grep -q 'VERSION_ID=\"2023\"' /etc/os-release; then",
              "    echo \"Detected Amazon Linux 2023. Installing with yum.\"",
              "    yum update -y",
              "    yum install docker -y",
              "  else",
              "    echo \"Unsupported OS for automatic Docker installation.\" && exit 1",
              "  fi",
              "else",
              "  echo \"Docker is already installed.\"",
              "fi",
              "echo \"--- [Step 2/5] Starting and Enabling Docker Service ---\"",
              "systemctl start docker",
              "systemctl enable docker",
              "echo \"--- [Step 3/5] Configuring User Permissions ---\"",
              "usermod -aG docker ec2-user",
              "echo \"--- [Step 4/5] Pulling new image and redeploying container ---\"",
              "/usr/bin/docker --version",
              "/usr/bin/docker pull ${{ secrets.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "/usr/bin/docker ps -q --filter name=mlops_llm_app_container | xargs -r /usr/bin/docker stop",
              "/usr/bin/docker ps -aq --filter name=mlops_llm_app_container | xargs -r /usr/bin/docker rm",
              "/usr/bin/docker run -d -p 8000:8000 --name mlops_llm_app_container --restart unless-stopped -e MODEL_S3_BUCKET=${{ secrets.MODEL_S3_BUCKET }} -e MODEL_S3_KEY=${{ secrets.MODEL_S3_KEY_PREFIX }} ${{ secrets.ECR_PUBLIC_REGISTRY_ALIAS }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "echo \"--- [Step 5/5] Deployment script finished ---\""
            ]}' \
            --output text
